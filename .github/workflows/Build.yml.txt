name: Android Kernel
on:
  workflow_dispatch:

jobs:

  buildkernel:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v4
      - name: setup environment 
        run: |
                  sudo add-apt-repository universe -y
                  sudo apt update
                  sudo apt install python2
                  sudo apt-get update && sudo apt-get install bc flex git ccache automake lzop bison gperf build-essential zip curl zlib1g-dev zlib1g-dev g++-multilib python3-networkx libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng -y
                  sudo apt-get install git aptitude make gcc -y                
                  sudo apt install python-is-python3 build-essential openssl pip -y
                  # Inease linux swapfile size (works best on SSD)
                  #sudo swapoff -a
                  #sudo dd if=/dev/zero of=/swapfile bs=4G count=8
                  #sudo mkswap /swapfile
                  #sudo swapon /swapfile
                  #free -m
                  # install python 2
                  export PATH=$PATH:$(pwd)/.local/bin
                  sudo apt install python3-virtualenv -y
                  sudo apt install flex
                  sudo apt install openssl -y
                  sudo aptitude install libssl-dev -y
                  # install repo
                  mkdir -p ~/.bin
                  PATH="${pwd}/.bin:${PATH}"
                  curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
                  chmod a+rx ~/.bin/repo
                 
      - name: set permissions
        run: sudo chmod +rwx *
      
      - name: Build kernel 
        env:
           TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
           TELEGRAM_CHATID: ${{ secrets.TELEGRAM_CHATID }}
            #echo "ANYKERNEL_SOURCE=$(cat config.env | grep -w "https://github.com/MohamedDevvv/AnyKernel3" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            #echo "ANYKERNEL_SOURCE_BRANCH=$(cat config.env | grep -w "master" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        run: bash build_kernel.sh
        
      - name: Package kernel
        run: |
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3 -b master AnyKernel3 && rm -rf AnyKernel3/.git AnyKernel3/.github AnyKernel3/LICENSE AnyKernel3/README.md
          if [[ -f out/arch/arm64/boot/Image.gz-dtb ]]; then
            cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/Image.gz-dtb
          elif [[ -f out/arch/arm64/boot/Image-dtb ]]; then
            cp out/arch/arm64/boot/Image-dtb AnyKernel3/Image-dtb
          elif [[ -f out/arch/arm64/boot/Image.gz ]]; then
            cp out/arch/arm64/boot/Image.gz AnyKernel3/Image.gz
          elif [[ -f out/arch/arm64/boot/Image ]]; then
            cp out/arch/arm64/boot/Image AnyKernel3/Image
          fi
          if [ -f out/arch/arm64/boot/dtbo.img ]; then
            cp out/arch/arm64/boot/dtbo.img AnyKernel3/dtbo.img
          fi

      - name: Upload kernel to artifact
        uses: actions/upload-artifact@v4
        with:
          name: output_kernel
          path: AnyKernel3/*
          
      - name: Release build
        uses: appleboy/telegram-action@master
        with:
         to: ${{ secrets.CHANNEL_ID }}
         token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
         message: Kernel is built!, took ${{ steps.build.outputs.elapsed_time }} seconds.
         document: ${{ steps.build.outputs.outfile }}
